//package {{package}};

import ceylon.json.stream {
    ObjectStartEvent,
    KeyEvent,
    ObjectEndEvent
}
import {{helperPackage}} {
    CustomJsonable,
    JSMap,
    JSArray,
    EventStream,
    ParseError,
    duplicateKey,
    missingKey,
    unexpectedEvent,
    unexpectedKey,
    parseJsonString,
    parseJsonArray,
    parseJsonInteger,
    parseJsonMap,
    parseJsonBoolean
}
{{#models}}

{{#model}}{{#description}}
"""
   {{description}}
   """{{/description}}
shared class {{classname}}({{#vars}}{{name}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}{{^required}} = null{{/required}}{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/vars}}) {{#parent}}
      extends {{{parent}}}(/* TODO: parent arguments? */){{/parent}}
      satisfies CustomJsonable {

{{-- TODO: handle enum properties (figure out what the Java version did, and how we can reproduce this for Ceylon.) --}}

{{#vars}}

  """{{#description}}{{{description}}}{{/description}}{{#minimum}}
     minimum: {{minimum}}{{/minimum}}{{#maximum}}
     maximum: {{maximum}}{{/maximum}}
     """
  shared {{{datatypeWithEnum}}} {{name}};
{{/vars}}


  shared actual Boolean equals(Object o) =>
    this == o ||
      (if(is {{classname}} o)
       then [{{#vars}}this.{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}]
         == [{{#vars}}   o.{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}]
       else false);

  shared actual Integer hash =>
      [{{#vars}}this.{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}].hash;
  
  shared actual String json =>
      JSMap{ {{#vars}}"{{name}}" -> {{#items}}JSArray({{/items}}this.{{name}}{{#items}}){{/items}}{{#hasMore}},
             {{/hasMore}}{{/vars}} }.json;

  shared actual String string => json;
}


shared {{classname}}|ParseError parseJson{{classname}}(EventStream stream) {
    value firstEvent = stream.next();
    if (!firstEvent is ObjectStartEvent) {
        return unexpectedEvent(`{{classname}}`, firstEvent, `ObjectStartEvent`);
    }
    {{#vars}}variable {{{datatypeWithEnum}}}? {{name}} = null;
    {{/vars}}
    while(true) {
        switch(event = stream.next())
        case(is KeyEvent) {
            switch(key = event.key)
            {{#vars}}case ("{{baseName}}") {
                if({{name}} exists) {
                    return duplicateKey(`{{classname}}`, key);
                }
                {{-- TODO: figure out how to handle maps --}}
                value item = {{#items}}parseJsonArray(stream,
                                            {{#items}}(s)=>parseJsonArray(s,
                                                                {{#items}}(s)=>parseJsonArray(s,
                                                                                    {{#items}}(s)=>parseJsonArray(s,
                                                                                                                  parseJson{{{datatypeWithEnum}}})
                                                                                    {{/items}}{{^items}}parseJson{{{datatypeWithEnum}}}{{/items}})
                                                                {{/items}}{{^items}}parseJson{{{datatypeWithEnum}}}{{/items}})
                                            {{/items}}{{^items}}parseJson{{{datatypeWithEnum}}}{{/items}});
                {{/items}}{{^items}}parseJson{{{datatypeWithEnum}}}(stream);
                {{/items}}

                if(is ParseError item) {
                    return item;
                } else {
                    {{name}} = item;
                }
            }
            {{/vars}}else {
                return unexpectedKey(`{{classname}}`, key);
            }
        }
        case(is ObjectEndEvent) {
            {{#vars}}{{#required}}
            if(!{{name}} exists) {
                return missingKey(`{{classname}}`, "{{baseName}}");
            }{{/required}}{{/vars}}

            assert({{#vars}}{{#required}}exists {{name}}_required = {{name}}, {{/required}}{{/vars}}true);
            return {{classname}} {
                       {{#vars}}{{#required}}{{name}} = {{name}}_required;
                       {{/required}}{{^required}}{{name}} = {{name}};
                       {{/required}}{{/vars}} };
        }
        else {
            return unexpectedEvent(`{{classname}}`, event);
        }
    }
}

{{/model}}
{{/models}}
